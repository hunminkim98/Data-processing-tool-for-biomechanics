markerless_value = markerless_mean
)
)
}
}
# 원본 시계열 데이터 저장
time_series_data[[joint]][[basename(file_path)]] <- list(
marker_based = data[[joint]]$marker_based,
markerless = data[[joint]]$markerless
)
}
# 기존 분석 결과 저장
file_results <- analyze_joints(data)
if (!is.null(file_results)) {
results_list[[basename(file_path)]] <- file_results
}
}
}
# 4. 모든 결과를 통합하여 ICC 및 RMSE 계산
combined_results <- list()
for (file_name in names(results_list)) {
file_results <- results_list[[file_name]]
for (joint in names(file_results)) {
if (is.null(combined_results[[joint]])) {
combined_results[[joint]] <- list()
}
for (coord in names(file_results[[joint]])) {
coord_results <- file_results[[joint]][[coord]]
if (is.null(combined_results[[joint]][[coord]])) {
combined_results[[joint]][[coord]] <- list(
icc_values = coord_results$icc_values,
icc_pvalues = coord_results$icc_pvalues,
rmse_values = coord_results$rmse_values
)
} else {
combined_results[[joint]][[coord]]$icc_values <- c(
combined_results[[joint]][[coord]]$icc_values,
coord_results$icc_values
)
combined_results[[joint]][[coord]]$icc_pvalues <- c(
combined_results[[joint]][[coord]]$icc_pvalues,
coord_results$icc_pvalues
)
combined_results[[joint]][[coord]]$rmse_values <- c(
combined_results[[joint]][[coord]]$rmse_values,
coord_results$rmse_values
)
}
}
}
}
# 5. 최종 결과 계산 (평균 및 표준편차)
summary_stats <- list()
for (joint in names(combined_results)) {
summary_stats[[joint]] <- list()
for (coord in names(combined_results[[joint]])) {
icc_values <- combined_results[[joint]][[coord]]$icc_values
icc_pvalues <- combined_results[[joint]][[coord]]$icc_pvalues
rmse_values <- combined_results[[joint]][[coord]]$rmse_values
summary_stats[[joint]][[coord]] <- list(
icc_values = icc_values,
icc_pvalues = icc_pvalues,
rmse_values = rmse_values,
icc_mean = mean(icc_values, na.rm = TRUE),
icc_sd = sd(icc_values, na.rm = TRUE),
icc_pvalue_mean = mean(icc_pvalues, na.rm = TRUE),
rmse_mean = mean(rmse_values, na.rm = TRUE),
rmse_sd = sd(rmse_values, na.rm = TRUE)
)
}
}
# 6. 결과 출력
cat("\n=== Analysis Results ===\n")
for (joint in names(summary_stats)) {
cat(sprintf("\n%s:\n", joint))
for (coord in names(summary_stats[[joint]])) {
stats <- summary_stats[[joint]][[coord]]
cat(sprintf("  %s coordinate:\n", coord))
cat(sprintf("    RMSE: %.2f ± %.2f mm\n",
stats$rmse_mean, stats$rmse_sd))
cat(sprintf("    ICC: %.3f ± %.3f (p = %.3f)\n",
stats$icc_mean, stats$icc_sd, stats$icc_pvalue_mean))
}
}
# 7. 시각화 및 결과 저장
create_plots(summary_stats, bland_altman_data = bland_altman_data_peak)
create_plots(summary_stats, bland_altman_data = bland_altman_data_mean, plot_suffix = "_mean")
save_results_to_excel(summary_stats)
cat("\nAnalysis complete. Results have been saved.\n")
return(list(
summary_stats = summary_stats,
time_series_data = time_series_data,
bland_altman_data_peak = bland_altman_data_peak,
bland_altman_data_mean = bland_altman_data_mean
))
}, error = function(e) {
cat("\nError in main function:", e$message, "\n")
return(NULL)
})
}
# Function to remove outliers using IQR method
remove_outliers <- function(data) {
# Calculate differences
differences <- data$marker_value - data$markerless_value
# Calculate Q1, Q3, and IQR for differences
Q1 <- quantile(differences, 0.25)
Q3 <- quantile(differences, 0.75)
IQR <- Q3 - Q1
# Define bounds
lower_bound <- Q1 - (2.0 * IQR)
upper_bound <- Q3 + (2.0 * IQR)
# Keep only the data within bounds
valid_indices <- differences >= lower_bound & differences <= upper_bound
# Return filtered data
return(data[valid_indices, ])
}
# Function to analyze all subjects for a given motion type
analyze_all_subjects <- function(motion_type = "kicking") {
# Get list of all subjects
subjects <- c("고승준", "김리언", "김준성", "김태형",
"방민식", "성기훈", "이준석", "장귀현",
"김건희", "김훈민")
# Initialize empty list to store all results
all_results <- list()
combined_summary_stats <- list()
# Initialize combined Bland-Altman data for both peak and mean
combined_bland_altman_data_peak <- list()
combined_bland_altman_data_mean <- list()
# Process each subject
for (subject in subjects) {
cat(sprintf("\n\nProcessing subject: %s\n", subject))
# Run analysis for current subject
tryCatch({
result <- main(motion_type, subject)
if (!is.null(result)) {
all_results[[subject]] <- result
# Combine Bland-Altman data for peak values
for (joint in names(result$bland_altman_data_peak)) {
if (!(joint %in% names(combined_bland_altman_data_peak))) {
combined_bland_altman_data_peak[[joint]] <- list()
}
for (coord in names(result$bland_altman_data_peak[[joint]])) {
if (!(coord %in% names(combined_bland_altman_data_peak[[joint]]))) {
combined_bland_altman_data_peak[[joint]][[coord]] <- data.frame(
marker_value = numeric(),
markerless_value = numeric(),
subject = character()
)
}
data <- result$bland_altman_data_peak[[joint]][[coord]]
if (nrow(data) > 0) {
data$subject <- subject
combined_bland_altman_data_peak[[joint]][[coord]] <- rbind(
combined_bland_altman_data_peak[[joint]][[coord]],
data
)
}
}
}
# Combine Bland-Altman data for mean values
for (joint in names(result$bland_altman_data_mean)) {
if (!(joint %in% names(combined_bland_altman_data_mean))) {
combined_bland_altman_data_mean[[joint]] <- list()
}
for (coord in names(result$bland_altman_data_mean[[joint]])) {
if (!(coord %in% names(combined_bland_altman_data_mean[[joint]]))) {
combined_bland_altman_data_mean[[joint]][[coord]] <- data.frame(
marker_value = numeric(),
markerless_value = numeric(),
subject = character()
)
}
data <- result$bland_altman_data_mean[[joint]][[coord]]
if (nrow(data) > 0) {
data$subject <- subject
combined_bland_altman_data_mean[[joint]][[coord]] <- rbind(
combined_bland_altman_data_mean[[joint]][[coord]],
data
)
}
}
}
# Combine results
for (joint in names(result$summary_stats)) {
if (!(joint %in% names(combined_summary_stats))) {
combined_summary_stats[[joint]] <- list()
}
for (coord in names(result$summary_stats[[joint]])) {
icc_values <- result$summary_stats[[joint]][[coord]]$icc_values
icc_pvalues <- result$summary_stats[[joint]][[coord]]$icc_pvalues
rmse_values <- result$summary_stats[[joint]][[coord]]$rmse_values
# 구간별 RMSE 데이터 수집 추가
segment_rmse_values <- result$summary_stats[[joint]][[coord]]$segment_rmse_values
# 평균 및 표준편차 계산
combined_summary_stats[[joint]][[coord]]$segment_rmse_mean <- apply(segment_rmse_values, 2, mean, na.rm = TRUE)
combined_summary_stats[[joint]][[coord]]$segment_rmse_sd <- apply(segment_rmse_values, 2, sd, na.rm = TRUE)
# Append values from this subject
combined_summary_stats[[joint]][[coord]]$icc_values <- c(
combined_summary_stats[[joint]][[coord]]$icc_values,
icc_values
)
combined_summary_stats[[joint]][[coord]]$icc_pvalues <- c(
combined_summary_stats[[joint]][[coord]]$icc_pvalues,
icc_pvalues
)
combined_summary_stats[[joint]][[coord]]$rmse_values <- c(
combined_summary_stats[[joint]][[coord]]$rmse_values,
rmse_values
)
}
}
}
}, error = function(e) {
cat(sprintf("Error processing subject %s: %s\n", subject, e$message))
})
}
# Calculate overall means and SDs for all subjects combined
for (joint in names(combined_summary_stats)) {
for (coord in names(combined_summary_stats[[joint]])) {
icc_values <- combined_summary_stats[[joint]][[coord]]$icc_values
icc_pvalues <- combined_summary_stats[[joint]][[coord]]$icc_pvalues
rmse_values <- combined_summary_stats[[joint]][[coord]]$rmse_values
combined_summary_stats[[joint]][[coord]]$icc_mean <- mean(icc_values, na.rm = TRUE)
combined_summary_stats[[joint]][[coord]]$icc_sd <- sd(icc_values, na.rm = TRUE)
combined_summary_stats[[joint]][[coord]]$icc_pvalue_mean <- mean(icc_pvalues, na.rm = TRUE)
combined_summary_stats[[joint]][[coord]]$rmse_mean <- mean(rmse_values, na.rm = TRUE)
combined_summary_stats[[joint]][[coord]]$rmse_sd <- sd(rmse_values, na.rm = TRUE)
}
}
# Create visualization directory for all subjects
vis_dir <- sprintf("visualization_all_subjects_%s", motion_type)
if (!dir.exists(vis_dir)) {
dir.create(vis_dir)
}
# Perform Bland-Altman analysis on combined data for peak values
combined_bland_altman_results_peak <- list()
for (joint in names(combined_bland_altman_data_peak)) {
combined_bland_altman_results_peak[[joint]] <- list()
for (coord in names(combined_bland_altman_data_peak[[joint]])) {
data <- combined_bland_altman_data_peak[[joint]][[coord]]
if (nrow(data) > 0) {
# Remove outliers
data <- remove_outliers(data)
ba_results <- bland_altman_analysis(data, joint, coord)
combined_bland_altman_results_peak[[joint]][[coord]] <- ba_results
}
}
}
# Perform Bland-Altman analysis on combined data for mean values
combined_bland_altman_results_mean <- list()
for (joint in names(combined_bland_altman_data_mean)) {
combined_bland_altman_results_mean[[joint]] <- list()
for (coord in names(combined_bland_altman_data_mean[[joint]])) {
data <- combined_bland_altman_data_mean[[joint]][[coord]]
if (nrow(data) > 0) {
# Remove outliers
data <- remove_outliers(data)
ba_results <- bland_altman_analysis(data, joint, coord)
combined_bland_altman_results_mean[[joint]][[coord]] <- ba_results
}
}
}
# Save combined results to Excel
save_results_to_excel(combined_summary_stats,
file_path = sprintf("results/%s_all_subjects_results.xlsx", motion_type))
# Save Bland-Altman results to Excel for both peak and mean
save_bland_altman_results_to_excel(combined_bland_altman_results_peak,
paste0(motion_type, "_peak"))
save_bland_altman_results_to_excel(combined_bland_altman_results_mean,
paste0(motion_type, "_mean"))
# Create plots with the combined data
create_plots(combined_summary_stats,
bland_altman_data = combined_bland_altman_data_peak,
save_dir = vis_dir)
create_plots(combined_summary_stats,
bland_altman_data = combined_bland_altman_data_mean,
save_dir = vis_dir,
plot_suffix = "_mean")
# Create time series plots with mean and SD
create_time_series_with_stats(all_results, motion_type)
# Print overall results
cat("\n=== Overall Analysis Results (All Subjects) ===\n")
for (joint in names(combined_summary_stats)) {
cat(sprintf("\n%s:\n", joint))
for (coord in names(combined_summary_stats[[joint]])) {
stats <- combined_summary_stats[[joint]][[coord]]
cat(sprintf("  %s coordinate:\n", coord))
cat(sprintf("    RMSE: %.2f ± %.2f mm\n",
stats$rmse_mean, stats$rmse_sd))
cat(sprintf("    ICC: %.3f ± %.3f (p = %.3f)\n",
stats$icc_mean, stats$icc_sd, stats$icc_pvalue_mean))
}
}
return(all_results)
}
create_combined_plots <- function(plot_data, save_dir = "visualization_all_subjects") {
if (!dir.exists(save_dir)) {
dir.create(save_dir)
}
# Joint 순서 정의
joint_order <- c("Ankle", "Knee", "Hip", "Trunk")
# Coordinate 순서 정의
coord_order <- c("X", "Y", "Z")
# 데이터 전처리
plot_data <- plot_data %>%
mutate(
Joint = factor(Joint, levels = joint_order),
Coordinate = factor(Coordinate, levels = coord_order),
x_label = interaction(Joint, Coordinate, sep = "_")
)
# ICC와 RMSE 데이터 분리
icc_data <- plot_data %>% filter(Metric == "ICC")
rmse_data <- plot_data %>% filter(Metric == "RMSE")
# RMSE의 최대값을 30으로 고정
rmse_max <- 30
# RMSE 데이터를 ICC 스케일로 변환 (0-1 스케일)
rmse_scaled <- rmse_data %>%
mutate(Value_scaled = Value / rmse_max)
# Create combined plot
p <- ggplot() +
# ICC 관련 레이어
geom_violin(data = icc_data, aes(x = Coordinate, y = Value, fill = Joint),
position = position_dodge(0.8), alpha = 0.3, scale = "width", width = 0.7) +
geom_boxplot(data = icc_data, aes(x = Coordinate, y = Value, fill = Joint),
position = position_dodge(0.8), width = 0.2, alpha = 0.7, outlier.shape = NA) +
stat_summary(data = icc_data, aes(x = Coordinate, y = Value, group = Joint),
fun = mean, geom = "point", shape = 23, size = 3,
position = position_dodge(0.8), fill = "white", color = "black") +
geom_point(data = icc_data, aes(x = Coordinate, y = Value, fill = Joint),
position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.8),
alpha = 0.3, size = 1) +
# RMSE 관련 레이어
geom_col(data = rmse_scaled %>% group_by(Joint, Coordinate) %>%
summarise(Value_scaled = mean(Value_scaled), .groups = 'drop'),
aes(x = Coordinate, y = Value_scaled, fill = Joint),
position = position_dodge(0.8), alpha = 0.3, width = 0.6) +
# 두 개의 y축 스케일 설정
scale_y_continuous(name = "ICC",
limits = c(0, 1),
sec.axis = sec_axis(~ . * rmse_max, name = "RMSE (deg.)",
breaks = seq(0, rmse_max, by = 5))) +
# Reference lines
geom_hline(yintercept = 0.9, linetype = "dashed", color = "red", linewidth = 0.5) +
geom_hline(yintercept = 5/rmse_max, linetype = "dashed", color = "red", linewidth = 0.5) +
# Facet and theme
facet_grid(. ~ Joint, scales = "free_x", space = "free_x") +
theme_minimal() +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
axis.text.x = element_text(angle = 0, hjust = 0.5),
axis.title.y.right = element_text(size = 16),
axis.text.y.right = element_text(size = 16),
legend.position = "none",
panel.spacing = unit(1, "lines"),
strip.text = element_text(size = 16, face = "bold"),
plot.caption = element_text(size = 14, hjust = 1),
panel.grid.major.x = element_blank()
) +
scale_fill_manual(values = c(
"Ankle" = "#1f77b4",
"Knee" = "#2ca02c",
"Hip" = "#ff7f0e",
"Trunk" = "#d62728"
)) +
labs(title = "ICC and RMSE (deg.) - All Subjects",
x = "Joint",
caption = "Box: 25-75th percentile, Line: median, Diamond: mean\nBars: RMSE mean values")
# Save plot
plot_filename <- file.path(save_dir, "ICC_RMSE_combined_plot.png")
ggsave(plot_filename, p, width = 15, height = 8, dpi = 300, bg = "white")
}
create_time_series_with_stats <- function(all_results, motion_type) {
if (!dir.exists("time_series_stats")) {
dir.create("time_series_stats")
}
# Create Excel directory if it doesn't exist
excel_dir <- "time_series_stats/excel"
if (!dir.exists(excel_dir)) {
dir.create(excel_dir, recursive = TRUE)
}
# Initialize combined data structure
combined_data <- list()
# Collect all normalized data (already 101 frames)
for (subject in names(all_results)) {
if (!is.null(all_results[[subject]]$time_series_data)) {
for (joint in names(all_results[[subject]]$time_series_data)) {
if (!(joint %in% names(combined_data))) {
combined_data[[joint]] <- list()
for (coord in c("X", "Y", "Z")) {
combined_data[[joint]][[coord]] <- list(
marker = matrix(nrow = 101, ncol = 0),
markerless = matrix(nrow = 101, ncol = 0)
)
}
}
# Get all trials for this subject
trials <- all_results[[subject]]$time_series_data[[joint]]
for (trial_data in trials) {
for (coord in c("X", "Y", "Z")) {
if (!is.null(trial_data$marker_based[[coord]]) &&
!is.null(trial_data$markerless[[coord]])) {
# Add trial data to matrices
combined_data[[joint]][[coord]]$marker <- cbind(
combined_data[[joint]][[coord]]$marker,
trial_data$marker_based[[coord]]
)
combined_data[[joint]][[coord]]$markerless <- cbind(
combined_data[[joint]][[coord]]$markerless,
trial_data$markerless[[coord]]
)
}
}
}
}
}
}
# Create plots for each joint and coordinate
for (joint in names(combined_data)) {
for (coord in c("X", "Y", "Z")) {
cat(sprintf("\nProcessing %s - %s:", joint, coord))
marker_data <- combined_data[[joint]][[coord]]$marker
markerless_data <- combined_data[[joint]][[coord]]$markerless
n_trials <- ncol(marker_data)
cat(sprintf("\nNumber of trials: %d", n_trials))
# Calculate mean and SD for each frame
marker_mean <- rowMeans(marker_data, na.rm = TRUE)
markerless_mean <- rowMeans(markerless_data, na.rm = TRUE)
marker_sd <- apply(marker_data, 1, sd, na.rm = TRUE)
markerless_sd <- apply(markerless_data, 1, sd, na.rm = TRUE)
# Create plot data
plot_data <- data.frame(
Frame = 0:100,  # Convert to percentage
Marker = marker_mean,
Markerless = markerless_mean,
Marker_SD = marker_sd,
Markerless_SD = markerless_sd
)
# Create plot
p <- ggplot(plot_data, aes(x = Frame)) +
# Add SD ribbons
geom_ribbon(
aes(ymin = Marker - Marker_SD,
ymax = Marker + Marker_SD,
fill = "Marker-based"),
alpha = 0.2
) +
geom_ribbon(
aes(ymin = Markerless - Markerless_SD,
ymax = Markerless + Markerless_SD,
fill = "Markerless"),
alpha = 0.2
) +
# Add mean lines
geom_line(aes(y = Marker, color = "Marker-based"), linewidth = 1) +
geom_line(aes(y = Markerless, color = "Markerless"), linewidth = 1) +
# Define colors
scale_color_manual(
name = "Measurement Method",
values = c("Marker-based" = "blue", "Markerless" = "red")
) +
scale_fill_manual(
name = "Measurement Method",
values = c("Marker-based" = "blue", "Markerless" = "red")
) +
# Combine legends
guides(
color = guide_legend(override.aes = list(fill = NA)),
fill = guide_legend(override.aes = list(alpha = 0.5))
) +
# Labels and theme
labs(
title = sprintf("%s - %s (%s)", joint, coord, motion_type),
subtitle = sprintf("Mean ± SD across all subjects (n=%d)", n_trials),
x = "Normalized Frame (%)",
y = "Angle (degrees)"
) +
theme_minimal() +
theme(
text = element_text(size = 16),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 16, hjust = 0.5),
legend.position = "right",
legend.box = "vertical",
panel.grid.major = element_line(color = "grey90"),
panel.grid.minor = element_line(color = "grey95"),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white")
) +
scale_x_continuous(breaks = seq(0, 100, 20))  # Add breaks every 20%
# Save plot
filename <- sprintf("time_series_stats/%s_%s_%s_time_series.png",
motion_type, joint, coord)
ggsave(filename, p, width = 12, height = 8, dpi = 300, bg = "white")
# Save data to Excel
excel_data <- data.frame(
Frame = 0:100,
Marker_Mean = marker_mean,
Marker_SD = marker_sd,
Markerless_Mean = markerless_mean,
Markerless_SD = markerless_sd
)
excel_filename <- file.path(excel_dir,
sprintf("%s_%s_%s_time_series.xlsx",
motion_type, joint, coord))
write.xlsx(excel_data, excel_filename, rowNames = FALSE)
}
}
}
source("VAL_J.R")
analyze_all_subjects(motion_type = "kicking")
